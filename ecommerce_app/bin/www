#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ecommerce-app:server');
var http = require('http');

var cluster = require("cluster");
const process = require('process');
const numCPUs = require('os').availableParallelism();
var socketio = require("socket.io");     /* we can remove it, as we have    const io = require('socket.io')(server); */

/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port, () => {
//   console.log("Server is listing at 3000");
// }); 
// server.on('error', onError);
// server.on('listening', onListening);



// OR for process ID          I comment it on 14/11/24

//  * Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


//  * Create HTTP server.

var totalUsersConnected = 0;
// Cluster implementation
if (cluster.isPrimary) {
  for (var i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
} else {
  var server = http.createServer(app);
  server.listen(port, () => {
    console.log(`Server is listing at ${port} and Processor ${process.pid}`);
  });
  server.on('error', onError);
  server.on('listening', onListening);

  // Socket io implementation.
  const io = require('socket.io')(server);                        
  io.on("connection", (socket) => {
    totalUsersConnected++;
    console.log("Total no of users currently connected are " + totalUsersConnected);

    socket.on("disconnect", (reason) => {
      console.log("Someone got disconnected");
      totalUsersConnected--;
      console.log("Total no of users currently connected are " + totalUsersConnected);
    });

    socket.on("userSendMsg", (msg) => {
      console.log("Got message from someone");
      console.log(msg);
      socket.broadcast.emit("userMsgReceive", msg);
    })
  });
}

// Use socket.emit to send a message to the current client.
// Use socket.broadcast.emit to send a message to everyone else except the sender.


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
